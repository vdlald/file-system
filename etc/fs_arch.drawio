<mxfile host="drawio-plugin" modified="2023-09-30T15:37:07.814Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.45 Safari/537.36" etag="DqHLkzQRk8OMJigEsdzp" version="20.5.3" type="embed"><diagram name="Страница — 1" id="_kciAetemQ8gbdCivMLz"><mxGraphModel dx="1186" dy="1676" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0"><root><mxCell id="0"/><mxCell id="1" parent="0"/><mxCell id="1TOLpVelZw8UjHg_SVkT-1" value="FileSystem" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1"><mxGeometry x="510" y="130" width="280" height="40" as="geometry"/></mxCell><mxCell id="5" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="1TOLpVelZw8UjHg_SVkT-2" target="4" edge="1"><mxGeometry relative="1" as="geometry"/></mxCell><mxCell id="1TOLpVelZw8UjHg_SVkT-2" value="Allocated Space" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1"><mxGeometry x="510" y="190" width="80" height="40" as="geometry"/></mxCell><mxCell id="1TOLpVelZw8UjHg_SVkT-3" value="File System Operations" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1"><mxGeometry x="610" y="190" width="80" height="40" as="geometry"/></mxCell><mxCell id="1TOLpVelZw8UjHg_SVkT-4" value="File System&lt;br&gt;Metadata" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1"><mxGeometry x="710" y="190" width="80" height="40" as="geometry"/></mxCell><mxCell id="1TOLpVelZw8UjHg_SVkT-10" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="1TOLpVelZw8UjHg_SVkT-1" target="1TOLpVelZw8UjHg_SVkT-3" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="630" y="260" as="sourcePoint"/><mxPoint x="680" y="210" as="targetPoint"/></mxGeometry></mxCell><mxCell id="1TOLpVelZw8UjHg_SVkT-12" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="550" y="170" as="sourcePoint"/><mxPoint x="550" y="190" as="targetPoint"/></mxGeometry></mxCell><mxCell id="1TOLpVelZw8UjHg_SVkT-13" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="749.5799999999999" y="170" as="sourcePoint"/><mxPoint x="749.5799999999999" y="190" as="targetPoint"/></mxGeometry></mxCell><mxCell id="3" value="&lt;h1 style=&quot;text-align: justify;&quot;&gt;Документация проекта&lt;/h1&gt;&lt;h1 style=&quot;text-align: justify;&quot;&gt;&lt;p style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;Базовые классы и интерфейсы&lt;/font&gt;&lt;/p&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;FileSystem -- п&lt;/span&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400; background-color: initial;&quot;&gt;редставление файловой системы&lt;/span&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;p style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;AllocatedSpace -- представляет собой выделенное пространство&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BlockAllocatedSpace -- класс-обертка над AllocatedSpace, который позволяет взаимодействовать с выделенным пространством по блочно&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;IndexedBlockAllocatedSpace -- расширение класса BlockAllocatedSpace, которое индексирует блоки в процессе работы с блоками&lt;/p&gt;&lt;p style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;BytesConverter -- представляет собой контракт по сериализации в байтовое представление и десериализации из байтового представления java-классов&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;/h1&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1"><mxGeometry x="40" y="40" width="440" height="280" as="geometry"/></mxCell><mxCell id="4" value="Available Blocks Index" style="rounded=0;whiteSpace=wrap;html=1;dashed=1;" parent="1" vertex="1"><mxGeometry x="510" y="250" width="80" height="40" as="geometry"/></mxCell><mxCell id="6" value="&lt;h1 style=&quot;&quot;&gt;&lt;p style=&quot;text-align: justify; font-size: 12px; font-weight: 400;&quot;&gt;CrudFileSystemOperations -- описывает базовые операции, которые должны быть в файловой системе&lt;/p&gt;&lt;p style=&quot;text-align: justify; font-size: 12px; font-weight: 400;&quot;&gt;ExtendedFileSystemOperations -- описывает расширенный набор операций, которые должны быть в дополнение к базовым операциям&lt;/p&gt;&lt;p style=&quot;text-align: justify; font-size: 12px; font-weight: 400;&quot;&gt;CreateFileSystemOperationImpl -- обрабатывает создание файловой системы&lt;/p&gt;&lt;p style=&quot;text-align: justify; font-size: 12px; font-weight: 400;&quot;&gt;OpenFileSystemOperationImpl -- позволяет прочитать файловую систему с ее метаданными&lt;/p&gt;&lt;/h1&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;align=left;" vertex="1" parent="1"><mxGeometry x="40" y="320" width="750" height="120" as="geometry"/></mxCell><mxCell id="7" value="&lt;h1&gt;&lt;span style=&quot;font-size: 18px; font-weight: normal;&quot;&gt;Как файловая система организована под капотом?&lt;/span&gt;&lt;/h1&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Как организовано пространство?&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Сама файловая система не знает каким образом внутри нее организуется рабочее пространство. Под нужды файловой системы выделяется фиксированное место при создании. Остальная часть отдается под работу алгоритму выделения памяти. Сам алгоритм представлен в BlockFileSystemOperations. В случае этой реализации доступная память может расширяться неограниченно (если забыть про размеры диска и тд), а сама память организуется в виде блоков по 4KB.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Почему по 4KB?&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Потому что по столько выделяется на Macbook Pro 2021 года по умолчанию, и потому что это современный минимум одного блока на таких файловых системах как ext3/4. Чем больше минимальный размер блока -- тем меньше накладных расходов будет уходить на запись файла, но при этом может уходить много накладных расходов для маленьких файлов.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Откуда я взял этот метод?&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Я проресерчил интернет в поисках интересных вариантов. Из всех, что я видел и что было достаточно интересно (сложно) в реализации и не занимало чересчур много времени была блочная система, но не было точного описания как она выглядела. Из всего что нашел, предлагалось, чтобы в начале (или конце) было расширяемое пространство под дескрипторы файлов, а с другого конца происходила запись. Также в этой варианте были индексные блоки, которые указывали на разные блоки записанного файла.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Меня такой вариант не устроил, потому что с&lt;span style=&quot;background-color: initial;&quot;&gt;ами блоки файла не расширяются, а тут вдруг почему-то появилось расширяемое пространство в конце или начале. Это значит, что если это расширяемое пространство упрется в блок контента файла, то блок контента придется куда-то переносить, а если это будет какой-нибудь индексный блок другого файла, то еще и дескриптор перезаписать надо этого файла. Всякие такие граничные кейсы сожительства расширяемой и не расширяемой памяти меня не устраивали.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Я решил доработать найденный подход так, чтобы он меня устраивал. Самое большое отличие в том, что нулевой блок в памяти занимается под нужды блока с дескрипторами файлов. У блока дескрипторов файлов есть ссылка на следующий блок, если закончился текущий. Таким образом исчез конфликт разных типов памяти и сложные кейсы на их границах, но это сказывается на скорости поиска дескриптора файла, т.к в худшем случае нужно пройтись по всем блокам с дескрипторами, чтобы найти нужный дескриптор файла.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Какие блоки в моем варианте есть?&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;1. Блок с дескрипторами файлов и ссылкой на следующий блок -- FileDescriporsBlock&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;2. Блок с указателями на части файла и ссылкой на следующий блок -- FileContentIndexBlock&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;Т.е твоя памяти организована в линейного списка блоков?&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Можно сказать так, все блоки, которые не содержат в себе части контента файла имеет ссылку на следующий блок. Для чтения файла из рандомного места это не станет проблемой, т.к легко посчитать до какого блока нужно дойти и с какого поинтера начать.&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;b style=&quot;background-color: initial;&quot;&gt;Каким образом устроена работа с блоками из кода?&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;&quot;&gt;Для каждого блока есть сериализатор в байты и десереализатор из байтов. Сам блок контента файла представлен в виде ByteBuffer с фиксированным размером в 4KB. Остальные блоки имеет упрощающую обертку в виде Chained...Block класса. Например FileDescriptorBlock имеет вспомогательный класс ChainedFileDescriptorsBlock, который скрывает от разработчика проблему заканчивающегося места в блоке, выделения нового и связывания с предыдущим.&lt;/p&gt;&lt;h1 style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Какой есть API для взаимодействия с файловой системой?&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Для прямого взаимодействия с файловой системой лучше всего использовать ExtendedFileSystemOperations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Если нужен интерфейс более высокого уровня для взаимодействия с кода, то лучше всего подойдет интерфейс JavaApi.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Если нужен интерфейс для ручного взаимодействия, то сейчас это только ArgumentsApi&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1"><mxGeometry x="40" y="450" width="750" height="880" as="geometry"/></mxCell></root></mxGraphModel></diagram></mxfile>